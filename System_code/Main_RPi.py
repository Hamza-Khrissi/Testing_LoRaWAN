#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
main_rpi.py - Script pour Raspberry Pi 4 avec transceiver SX1262
Traitement complet des EPCs RFID via LoRaWAN avec transmission r√©elle.
"""

import os
import sys
import time
from pathlib import Path
from datetime import datetime
import pandas as pd
import signal
import threading

# Import de la classe principale
try:
    from MainController import MainController
except ImportError:
    print("‚ùå Erreur: Impossible d'importer MainController")
    sys.exit(1)

# Imports pour Raspberry Pi et SX1262
try:
    import spidev
    import RPi.GPIO as GPIO
    SPI_AVAILABLE = True
    print("‚úÖ Modules SPI/GPIO disponibles")
except ImportError:
    SPI_AVAILABLE = False
    print("‚ö†Ô∏è Modules SPI/GPIO non disponibles (mode simulation)")

# Configuration GPIO pour SX1262
class SX1262Config:
    """Configuration des pins GPIO pour le SX1262."""
    
    # Pins GPIO (BCM numbering)
    NSS_PIN = 8      # Chip Select (CE0)
    RESET_PIN = 22   # Reset
    BUSY_PIN = 23    # Busy
    DIO1_PIN = 24    # Digital I/O 1 (IRQ)
    
    # Configuration SPI
    SPI_BUS = 0      # SPI bus number
    SPI_DEVICE = 0   # SPI device number
    SPI_SPEED = 1000000  # 1MHz
    
    # Configuration LoRa
    FREQUENCY = 868100000  # 868.1 MHz (EU868)
    OUTPUT_POWER = 14      # dBm
    PREAMBLE_LENGTH = 8    # symbols


class SX1262Controller:
    """Contr√¥leur pour le transceiver SX1262."""
    
    def __init__(self):
        self.config = SX1262Config()
        self.spi = None
        self.initialized = False
        
        if SPI_AVAILABLE:
            self.setup_gpio()
            self.setup_spi()
        else:
            print("‚ö†Ô∏è Mode simulation - pas de communication SPI r√©elle")
    
    def setup_gpio(self):
        """Configure les pins GPIO."""
        try:
            GPIO.setmode(GPIO.BCM)
            GPIO.setwarnings(False)
            
            # Configuration des pins
            GPIO.setup(self.config.NSS_PIN, GPIO.OUT)
            GPIO.setup(self.config.RESET_PIN, GPIO.OUT)
            GPIO.setup(self.config.BUSY_PIN, GPIO.IN)
            GPIO.setup(self.config.DIO1_PIN, GPIO.IN)
            
            # √âtat initial
            GPIO.output(self.config.NSS_PIN, GPIO.HIGH)
            GPIO.output(self.config.RESET_PIN, GPIO.HIGH)
            
            print("‚úÖ GPIO configur√©")
            
        except Exception as e:
            print(f"‚ùå Erreur configuration GPIO: {e}")
            raise
    
    def setup_spi(self):
        """Configure la communication SPI."""
        try:
            self.spi = spidev.SpiDev()
            self.spi.open(self.config.SPI_BUS, self.config.SPI_DEVICE)
            self.spi.max_speed_hz = self.config.SPI_SPEED
            self.spi.mode = 0
            
            print("‚úÖ SPI configur√©")
            
        except Exception as e:
            print(f"‚ùå Erreur configuration SPI: {e}")
            raise
    
    def reset_sx1262(self):
        """Reset du SX1262."""
        if not SPI_AVAILABLE:
            print("üîÑ [SIMULATION] Reset SX1262")
            time.sleep(0.1)
            return
        
        try:
            GPIO.output(self.config.RESET_PIN, GPIO.LOW)
            time.sleep(0.001)  # 1ms
            GPIO.output(self.config.RESET_PIN, GPIO.HIGH)
            time.sleep(0.01)   # 10ms
            
            # Attendre que BUSY soit √† LOW
            timeout = 100
            while GPIO.input(self.config.BUSY_PIN) and timeout > 0:
                time.sleep(0.001)
                timeout -= 1
            
            if timeout == 0:
                raise TimeoutError("SX1262 reste occup√© apr√®s reset")
            
            print("‚úÖ SX1262 reset effectu√©")
            
        except Exception as e:
            print(f"‚ùå Erreur reset SX1262: {e}")
            raise
    
    def send_command(self, command: int, params: list = None) -> list:
        """Envoie une commande au SX1262."""
        if not SPI_AVAILABLE:
            print(f"üì° [SIMULATION] Commande SX1262: 0x{command:02X}")
            return [0x00] * (len(params) if params else 1)
        
        try:
            # Attendre que BUSY soit √† LOW
            while GPIO.input(self.config.BUSY_PIN):
                time.sleep(0.001)
            
            # Pr√©paration des donn√©es
            data = [command]
            if params:
                data.extend(params)
            
            # Transmission SPI
            GPIO.output(self.config.NSS_PIN, GPIO.LOW)
            response = self.spi.xfer2(data)
            GPIO.output(self.config.NSS_PIN, GPIO.HIGH)
            
            return response
            
        except Exception as e:
            print(f"‚ùå Erreur commande SX1262: {e}")
            raise
    
    def initialize_lora(self, sf: int, bw: int, cr: int):
        """Initialise le SX1262 en mode LoRa."""
        try:
            print("üîß Initialisation SX1262...")
            
            # Reset du module
            self.reset_sx1262()
            
            # Commandes d'initialisation (simplifi√©es)
            commands = [
                (0x80, [0x00]),  # SetStandby
                (0x8A, [0x01]),  # SetPacketType (LoRa)
                (0x8B, [sf, bw, cr, 0]),  # SetModulationParams
                (0x8C, [8, 0, 12, 1, 0, 0]),  # SetPacketParams
                (0x86, [self.config.FREQUENCY >> 24, 
                       (self.config.FREQUENCY >> 16) & 0xFF,
                       (self.config.FREQUENCY >> 8) & 0xFF,
                       self.config.FREQUENCY & 0xFF]),  # SetRfFrequency
                (0x8E, [self.config.OUTPUT_POWER, 0x04]),  # SetTxParams
            ]
            
            for cmd, params in commands:
                self.send_command(cmd, params)
                time.sleep(0.01)
            
            self.initialized = True
            print("‚úÖ SX1262 initialis√©")
            
        except Exception as e:
            print(f"‚ùå Erreur initialisation SX1262: {e}")
            raise
    
    def transmit_payload(self, payload: bytes) -> bool:
        """Transmet un payload via LoRaWAN."""
        if not self.initialized:
            print("‚ö†Ô∏è SX1262 non initialis√©")
            return False
        
        try:
            if not SPI_AVAILABLE:
                print(f"üì° [SIMULATION] Transmission: {payload.hex().upper()} ({len(payload)} octets)")
                time.sleep(0.5)  # Simule le temps de transmission
                return True
            
            # √âcriture du payload dans le buffer
            self.send_command(0x0E, [0x00])  # WriteBuffer
            self.send_command(0x0E, list(payload))
            
            # Configuration du packet
            self.send_command(0x8C, [self.config.PREAMBLE_LENGTH, 0, len(payload), 1, 0, 0])
            
            # Transmission
            self.send_command(0x83, [0x40, 0x00, 0x00])  # SetTx
            
            # Attente de fin de transmission (simplifi√©e)
            time.sleep(1.0)  # Timeout approximatif bas√© sur le SF
            
            print(f"üì° Payload transmis: {payload.hex().upper()} ({len(payload)} octets)")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur transmission: {e}")
            return False
    
    def cleanup(self):
        """Nettoyage des ressources."""
        try:
            if self.spi:
                self.spi.close()
            
            if SPI_AVAILABLE:
                GPIO.cleanup()
            
            print("‚úÖ Nettoyage SX1262 termin√©")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur nettoyage: {e}")


class RPiMainController:
    """Contr√¥leur principal pour Raspberry Pi avec transmission LoRa."""
    
    def __init__(self, sf: int = 12, bw: int = 125, cr: int = 1):
        self.main_controller = MainController(sf, bw, cr, "rpi_processing.log")
        self.sx1262 = SX1262Controller()
        self.transmission_active = False
        self.stop_event = threading.Event()
        
        # Configuration du signal handler pour arr√™t propre
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """Gestionnaire pour arr√™t propre."""
        print(f"\n‚ö†Ô∏è Signal {signum} re√ßu - Arr√™t en cours...")
        self.stop_event.set()
        self.transmission_active = False
    
    def initialize_hardware(self):
        """Initialise le mat√©riel LoRa."""
        try:
            print("üîß Initialisation du mat√©riel LoRa...")
            self.sx1262.initialize_lora(
                sf=self.main_controller.sf,
                bw=self.main_controller.bw,
                cr=self.main_controller.cr
            )
            print("‚úÖ Mat√©riel LoRa pr√™t")
            
        except Exception as e:
            print(f"‚ùå Erreur initialisation mat√©riel: {e}")
            raise
    
    def transmit_payloads(self, delay_between_frames: float = 1.0):
        """Transmet tous les payloads g√©n√©r√©s."""
        try:
            if not self.main_controller.final_results:
                print("‚ö†Ô∏è Aucun payload √† transmettre")
                return False
            
            print(f"üì° D√©but transmission de {len(self.main_controller.final_results)} payloads")
            print(f"‚è±Ô∏è D√©lai entre trames: {delay_between_frames:.1f}s")
            
            self.transmission_active = True
            transmitted_count = 0
            failed_count = 0
            
            for i, result in enumerate(self.main_controller.final_results):
                if self.stop_event.is_set():
                    print("\n‚ö†Ô∏è Transmission interrompue")
                    break
                
                print(f"\nüì§ Transmission {i+1}/{len(self.main_controller.final_results)}")
                print(f"   Groupe {result['Group_ID']}: {result['Suffix_Count']} EPCs")
                
                # Reconstruction du payload
                payload = bytes.fromhex(result['Payload_Hex'])
                
                # Transmission
                success = self.sx1262.transmit_payload(payload)
                
                if success:
                    transmitted_count += 1
                    print(f"   ‚úÖ Transmis ({result['T_frame_ms']:.2f}ms th√©orique)")
                else:
                    failed_count += 1
                    print(f"   ‚ùå √âchec transmission")
                
                # D√©lai entre les transmissions
                if i < len(self.main_controller.final_results) - 1:
                    for remaining in range(int(delay_between_frames * 10), 0, -1):
                        if self.stop_event.is_set():
                            break
                        if remaining % 10 == 0:
                            print(f"   ‚è≥ Attente {remaining//10}s...", end='\r')
                        time.sleep(0.1)
                    print(" " * 20, end='\r')  # Efface le compteur
            
            self.transmission_active = False
            
            print(f"\nüìä R√©sum√© transmission:")
            print(f"   ‚Ä¢ R√©ussies: {transmitted_count}")
            print(f"   ‚Ä¢ √âchecs: {failed_count}")
            print(f"   ‚Ä¢ Total: {len(self.main_controller.final_results)}")
            
            return transmitted_count > 0
            
        except Exception as e:
            print(f"‚ùå Erreur durant la transmission: {e}")
            return False
    
    def run_complete_process_with_transmission(self, input_file: str = None, 
                                             transmit: bool = True, 
                                             delay_between_frames: float = 1.0):
        """Ex√©cute le processus complet avec transmission LoRa."""
        try:
            print("üöÄ PROCESSUS COMPLET RASPBERRY PI")
            print("=" * 80)
            print(f"üìÖ D√©marrage: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # √âtape 1: Traitement des EPCs
            print("\nüîÑ Phase 1: Traitement des EPCs")
            result_file = self.main_controller.run_complete_process(input_file)
            
            if transmit:
                # √âtape 2: Initialisation du mat√©riel
                print("\nüîÑ Phase 2: Initialisation du mat√©riel LoRa")
                self.initialize_hardware()
                
                # √âtape 3: Transmission
                print("\nüîÑ Phase 3: Transmission LoRa")
                success = self.transmit_payloads(delay_between_frames)
                
                if success:
                    print("\nüéâ TRANSMISSION TERMIN√âE AVEC SUCC√àS")
                else:
                    print("\n‚ö†Ô∏è TRANSMISSION TERMIN√âE AVEC ERREURS")
            else:
                print("\n‚è≠Ô∏è Transmission d√©sactiv√©e")
            
            print(f"\nüìÅ Fichiers g√©n√©r√©s:")
            print(f"   ‚Ä¢ Log: rpi_processing.log")
            print(f"   ‚Ä¢ Optimisation: {self.main_controller.optimized_file}")
            print(f"   ‚Ä¢ R√©sultats finaux: {result_file}")
            
            return result_file
            
        except Exception as e:
            print(f"üí• Erreur processus complet: {e}")
            raise
        
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Nettoyage final."""
        print("\nüßπ Nettoyage en cours...")
        self.sx1262.cleanup()


def check_raspberry_pi():
    """V√©rifie si on est sur un Raspberry Pi."""
    try:
        with open('/proc/device-tree/model', 'r') as f:
            model = f.read()
            return 'Raspberry Pi' in model
    except:
        return False


def display_system_info():
    """Affiche les informations syst√®me."""
    print("üñ•Ô∏è INFORMATIONS SYST√àME")
    print("-" * 50)
    
    # V√©rification Raspberry Pi
    is_rpi = check_raspberry_pi()
    print(f"Raspberry Pi d√©tect√©: {'‚úÖ Oui' if is_rpi else '‚ùå Non'}")
    
    # Modules disponibles
    print(f"Modules SPI/GPIO: {'‚úÖ Disponibles' if SPI_AVAILABLE else '‚ùå Manquants'}")
    
    # Informations syst√®me
    try:
        import platform
        print(f"Syst√®me: {platform.system()} {platform.release()}")
        print(f"Architecture: {platform.machine()}")
    except:
        pass
    
    print()


def interactive_config():
    """Configuration interactive."""
    print("üéõÔ∏è CONFIGURATION INTERACTIVE")
    print("-" * 50)
    
    # Configuration LoRaWAN
    try:
        sf = int(input("Spreading Factor (7-12) [12]: ") or "12")
        if sf not in range(7, 13):
            raise ValueError
    except ValueError:
        print("‚ö†Ô∏è SF invalide, utilisation de SF=12")
        sf = 12
    
    try:
        bw = int(input("Bandwidth kHz (125/250/500) [125]: ") or "125")
        if bw not in [125, 250, 500]:
            raise ValueError
    except ValueError:
        print("‚ö†Ô∏è BW invalide, utilisation de BW=125")
        bw = 125
    
    try:
        cr = int(input("Coding Rate (1-4) [1]: ") or "1")
        if cr not in range(1, 5):
            raise ValueError
    except ValueError:
        print("‚ö†Ô∏è CR invalide, utilisation de CR=1")
        cr = 1
    
    # Options de transmission
    transmit = input("Transmettre via LoRa ? (Y/n): ").lower().strip() not in ['n', 'no', 'non']
    
    delay = 1.0
    if transmit:
        try:
            delay = float(input("D√©lai entre trames (s) [1.0]: ") or "1.0")
        except ValueError:
            print("‚ö†Ô∏è D√©lai invalide, utilisation de 1.0s")
            delay = 1.0
    
    return sf, bw, cr, transmit, delay


def main():
    """Fonction principale."""
    print("üçì RFID LoRaWAN Processing - Raspberry Pi Mode")
    print("=" * 80)
    
    # Informations syst√®me
    display_system_info()
    
    # V√©rification des fichiers
    if not Path("EPCS.xlsx").exists():
        print("‚ùå Fichier EPCS.xlsx manquant")
        print("üìã Cr√©ez ce fichier avec vos EPCs RFID (24 caract√®res hex par ligne)")
        return
    
    try:
        # Configuration
        mode = input("Mode interactif ? (y/N): ").lower().strip()
        if mode in ['y', 'yes', 'o', 'oui']:
            sf, bw, cr, transmit, delay = interactive_config()
        else:
            sf, bw, cr, transmit, delay = 12, 125, 1, True, 1.0
            print(f"üîß Configuration par d√©faut: SF={sf}, BW={bw}kHz, CR=4/{cr+4}")
            print(f"üì° Transmission: {'Activ√©e' if transmit else 'D√©sactiv√©e'}")
        
        print()
        
        # Initialisation du contr√¥leur
        controller = RPiMainController(sf, bw, cr)
        
        # Ex√©cution du processus complet
        result_file = controller.run_complete_process_with_transmission(
            transmit=transmit,
            delay_between_frames=delay
        )
        
        print(f"\nüéâ PROCESSUS TERMIN√â")
        print(f"üìÅ R√©sultats dans: {result_file}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Processus interrompu par l'utilisateur")
        
    except Exception as e:
        print(f"\nüí• Erreur: {e}")
        print("üìã Consultez rpi_processing.log pour plus de d√©tails")
        
    finally:
        print(f"\nüìÖ Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("üëã Au revoir !")


if __name__ == "__main__":
    main()