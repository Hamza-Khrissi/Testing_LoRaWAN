# üîß RFID LoRaWAN Processing System

## üìã Description

Syst√®me complet de traitement et transmission d'EPCs RFID via LoRaWAN, optimis√© pour la compression de donn√©es et la transmission efficace.

### üéØ Fonctionnalit√©s principales

- **Optimisation des EPCs** : Regroupement par pr√©fixes communs pour r√©duire la taille des payloads
- **Encapsulation LoRaWAN** : G√©n√©ration de trames LoRaWAN avec calculs pr√©cis des param√®tres
- **Support multi-plateforme** : Version PC (test) et Raspberry Pi (transmission r√©elle)
- **Interface SX1262** : Communication SPI avec transceiver LoRa
- **Logging complet** : Tra√ßabilit√© de tous les traitements

## üìÅ Structure du projet

```
LORAWAN-CODE/
‚îú‚îÄ‚îÄ EPC_OPT.py              # Classe d'optimisation des EPCs
‚îú‚îÄ‚îÄ Encapsulation.py        # Classe d'encapsulation LoRaWAN
‚îú‚îÄ‚îÄ MainController.py       # Contr√¥leur principal
‚îú‚îÄ‚îÄ main_test.py           # Script pour PC (Visual Studio Code)
‚îú‚îÄ‚îÄ main_rpi.py            # Script pour Raspberry Pi 4
‚îú‚îÄ‚îÄ EPCS.xlsx              # Fichier d'entr√©e (EPCs RFID)
‚îú‚îÄ‚îÄ EPCSOPT.xlsx           # R√©sultats d'optimisation
‚îú‚îÄ‚îÄ FinalOutput.xlsx       # R√©sultats finaux
‚îî‚îÄ‚îÄ README.md              # Ce fichier
```

## ‚öôÔ∏è Installation

### Pr√©requis communs

```bash
pip install pandas openpyxl pathlib
```

### Pour Raspberry Pi uniquement

```bash
pip install spidev RPi.GPIO
# ou
pip install pySX126x  # Alternative pour SX1262
```

## üöÄ Utilisation

### 1. Pr√©paration des donn√©es

Cr√©ez un fichier `EPCS.xlsx` contenant vos EPCs RFID :
- Une colonne avec des EPCs de 24 caract√®res hexad√©cimaux
- Un EPC par ligne
- Exemple : `E28011606000020000003039`

### 2. Ex√©cution sur PC (Test)

```bash
python main_test.py
```

**Fonctionnalit√©s :**
- ‚úÖ Traitement complet des EPCs
- ‚úÖ G√©n√©ration des payloads LoRaWAN
- ‚úÖ Export Excel des r√©sultats
- ‚úÖ Mode interactif pour configuration
- ‚úÖ Simulation des param√®tres LoRa
- ‚ùå Pas de transmission r√©elle

**Fichiers g√©n√©r√©s :**
- `EPCSOPT.xlsx` : R√©sultats d'optimisation
- `FinalOutput.xlsx` : Payloads LoRaWAN g√©n√©r√©s
- `test_processing.log` : Journal d√©taill√©

### 3. Ex√©cution sur Raspberry Pi (Production)

```bash
sudo python main_rpi.py
```

**Fonctionnalit√©s :**
- ‚úÖ Traitement complet des EPCs
- ‚úÖ G√©n√©ration des payloads LoRaWAN
- ‚úÖ Export Excel des r√©sultats
- ‚úÖ Transmission LoRa via SX1262
- ‚úÖ Communication SPI
- ‚úÖ Gestion GPIO
- ‚úÖ Arr√™t propre (Ctrl+C)

**Configuration GPIO (SX1262) :**
```
NSS (CS)  : GPIO 8  (CE0)
RESET     : GPIO 22
BUSY      : GPIO 23
DIO1 (IRQ): GPIO 24
SPI       : Bus 0, Device 0
```

## üîß Configuration LoRaWAN

### Param√®tres support√©s

| Param√®tre | Valeurs possibles | D√©faut |
|-----------|-------------------|--------|
| Spreading Factor (SF) | 7-12 | 12 |
| Bandwidth (BW) | 125, 250, 500 kHz | 125 |
| Coding Rate (CR) | 1-4 (4/5 √† 4/8) | 1 |
| Fr√©quence | 868.1 MHz (EU868) | Fixe |
| Puissance | 14 dBm | Fixe |

### Calculs automatiques

Le syst√®me calcule automatiquement :
- Taille maximale du payload selon le SF
- Nombre d'EPCs par trame
- Dur√©e des symboles (T_sym)
- Dur√©e des trames (T_frame)
- Temps de transmission total
- Respect du duty cycle (1% max/jour)

## üìä Format des r√©sultats

### Fichier `EPCSOPT.xlsx`

| Colonne | Description |
|---------|-------------|
| Group_ID | Identifiant du groupe |
| Prefix | Pr√©fixe commun (hex) |
| Prefix_Bytes | Taille du pr√©fixe en octets |
| Suffix_Bytes | Taille des suffixes en octets |
| Suffix_Count | Nombre d'EPCs dans le groupe |
| Total_Payload_Bytes | Taille totale compress√©e |
| EPCs_SF7_51B | EPCs max avec SF7 (51 octets) |
| EPCs_SF12_11B | EPCs max avec SF12 (11 octets) |
| Compression_% | Taux de compression |

### Fichier `FinalOutput.xlsx`

| Colonne | Description |
|---------|-------------|
| Group_ID | Identifiant du groupe |
| Prefix | Pr√©fixe commun |
| Suffix_Count | Nombre d'EPCs |
| Original_EPCs | EPCs d'origine |
| Payload_Hex | Payload LoRaWAN (hex) |
| Payload_Bytes | Taille du payload |
| T_frame_ms | Dur√©e de trame (ms) |
| T_sym_ms | Dur√©e symbole (ms) |
| N_payload | Nombre de symboles payload |
| Decoded_EPCs | EPCs d√©cod√©s (v√©rification) |
| Verification_OK | V√©rification r√©ussie |

## üîç Classes principales

### MainController

Contr√¥leur principal qui orchestre le processus complet :

```python
controller = MainController(sf=12, bw=125, cr=1)
result_file = controller.run_complete_process()
```

### EPCAnalyzer (EPC_OPT.py)

Analyse et optimise les EPCs par regroupement :
- Lecture fichiers Excel/CSV/TXT
- Regroupement par pr√©fixes communs
- Calcul des compressions
- Export des r√©sultats

### EPCLoRaWANCalculator (Encapsulation.py)

Encapsulation LoRaWAN et calculs :
- Cr√©ation d'en-t√™tes LoRaWAN
- Encapsulation des EPCs
- Calculs des param√®tres radio
- D√©codage et v√©rification

## üõ†Ô∏è Utilisation avanc√©e

### Mode interactif

Les deux scripts supportent un mode interactif :

```bash
python main_test.py
# ou
python main_rpi.py
```

Puis r√©pondre `y` √† "Mode interactif ?"

### Configuration programmatique

```python
from MainController import MainController

# Configuration personnalis√©e
controller = MainController(
    sf=10,           # SF10 pour plus de d√©bit
    bw=250,          # 250 kHz bandwidth
    cr=2,            # CR 4/6
    log_file="custom.log"
)

# Traitement
controller.load_input_epcs("mes_epcs.xlsx")
controller.optimize_epcs()
controller.create_lorawan_calculator()
controller.process_groups_to_payloads()
controller.save_final_results("mes_resultats.xlsx")
```

### Transmission Raspberry Pi

```python
from main_rpi import RPiMainController

controller = RPiMainController(sf=12, bw=125, cr=1)
controller.run_complete_process_with_transmission(
    transmit=True,
    delay_between_frames=2.0  # 2s entre trames
)
```

## üêõ D√©pannage

### Erreurs communes

**"File not found: EPCS.xlsx"**
- Cr√©ez le fichier avec vos EPCs
- Utilisez le mode interactif pour g√©n√©rer un exemple

**"Invalid EPC format"**
- V√©rifiez que les EPCs font exactement 24 caract√®res
- Utilisez uniquement des caract√®res hexad√©cimaux (0-9, A-F)

**"Modules SPI/GPIO non disponibles"**
- Sur PC : Normal, le script fonctionne en mode simulation
- Sur Raspberry Pi : Installez les modules requis

**"Permission denied" sur Raspberry Pi**
- Utilisez `sudo python main_rpi.py`
- V√©rifiez les permissions sur `/dev/spidev*`

### Logs de d√©bogage

Tous les traitements sont enregistr√©s dans les fichiers de log :
- `test_processing.log` (PC)
- `rpi_processing.log` (Raspberry Pi)

## üìà Optimisations

### Compression des EPCs

Le syst√®me optimise automatiquement :
- Regroupement par pr√©fixes communs (minimum 6 caract√®res)
- Calcul du taux de compression
- Adaptation selon les limites LoRaWAN

### Param√®tres LoRa optimaux

| Cas d'usage | SF | BW | Avantages |
|-------------|----|----|-----------|
| Longue port√©e | 12 | 125 | Maximum de port√©e |
| D√©bit moyen | 10 | 125 | Compromis port√©e/d√©bit |
| Haut d√©bit | 7 | 250 | Maximum de d√©bit |

### Respect du duty cycle

Le syst√®me calcule automatiquement :
- Temps d'antenne par lot d'EPCs
- Nombre maximum de lots par jour (1% duty cycle)
- Planification optimale des transmissions

## ü§ù Contribution

Pour contribuer au projet :
1. Respectez la structure des classes existantes
2. Ajoutez des logs d√©taill√©s
3. Testez sur PC avant Raspberry Pi
4. Documentez les nouvelles fonctionnalit√©s

## üìÑ Licence

Ce projet est sous licence [LICENSE].

## üìû Support

Pour toute question ou probl√®me :
- Consultez les fichiers de log
- V√©rifiez la configuration LoRaWAN
- Testez d'abord en mode PC